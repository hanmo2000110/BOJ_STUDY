'''
좋은 수 골드1
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	128 MB	1126	169	149	19.054%
문제
정수 집합 S가 주어졌을때, 다음 조건을 만족하는 구간 [A, B]를 좋은 구간이라고 한다.

A와 B는 양의 정수이고, A < B를 만족한다.
A ≤ x ≤ B를 만족하는 모든 정수 x가 집합 S에 속하지 않는다.
정수 x를 포함하는 좋은 구간의 개수가 정수 y를 포함하는 좋은 구간의 개수보다 작으면 x는 y보다 더 좋다고 한다. x와 y를 포함하는 좋은 구간의 개수가 같거나, 구간의 개수가 둘 다 무한대와 같은 경우, 작은 수를 더 좋다고 한다.

집합 S가 주어지고, 이를 이용해 전체 정수를 더 좋은 수가 앞으로 오게 정렬했다고 가정하자. 앞에 오는 수 n개를 구해보자.

입력
첫째 줄에 집합 S의 크기 L이 주어진다. 둘째 줄에는 집합에 포함된 정수가 주어진다. 셋째 줄에는 n이 주어진다.

출력
상위 N개의 수를 공백으로 구분해 출력한다.

제한
1 ≤ L ≤ 50
집합 S에는 중복되는 정수가 없다.
집합 S에 포함된 모든 정수는 1보다 크거나 같고, 1,000,000,000보다 작거나 같다.
1 ≤ n ≤ 100
예제 입력 1
1
3
6
예제 출력 1
3 1 2 4 5 6
예제 입력 2
3
5 11 18
9
예제 출력 2
5 11 18 1 4 6 10 2 3
예제 입력 3
3
7 13 18
9
예제 출력 3
7 13 18 14 17 8 12 1 6
예제 입력 4
5
1000 1004 4000 4003 5000
19
예제 출력 4
1000 1004 4000 4003 5000 4001 4002 1001 1003 1002 4004 4999 1 999 4005 4998 2 998 4006
예제 입력 5
1
1000000000
8
예제 출력 5
1000000000 1 999999999 2 999999998 3 999999997 4

접근버 :
솔직히 처음 봤을 때 뭔소리 하는지 이해 안됐다
다시 여러번 읽어보았다

간단하게 보면 포함하고 있는 구간의 수가 적을수록 좋은수다
0개인 집합 S에 속하는 수는 이미 좋은 수이고
집합 S에 속하는 수 사이에 있는 수는
    1. 두 수의 차이가 2 이상이라면 두수에 가까울 수록 속하는 범위의 수가 적다
    2. 2 미만이라면 1이니 그 수는 속하는 구간이 없으므로 0이다
    3. 만약 N개 의 숫자를 집합에 속하는 수에 가까운 숫자들로 구성했는데도 자리가 남는다면 집합의 가장 큰수의 다음 숫자들을 출력하면 된다.

나름대로 해결해보겠다고 정렬 여러번 해가면서 시도해봤지만 결국 실패했고
(27퍼까진 잘 돌아가다 27퍼에서 틀렸습니다 뜸 하... 뭐가 문제지)
다른 사람들의 코드를 확인하던 중 heapq 를 사용하면 정렬을 귀찮게 여러번 안 해줘도 되었다는 것을 깨달았다

자체 피드백 :
1. heapq를 사용했다면 정렬을 덜 사용할 수 있었다
2. 정렬 기준이 되는 값의 계산식이 불완전했었다 그래서 27%에서 계속 틀렸었던듯
    2.1 올바른 계산식은 f(x) = (범위의마지막 - x)(x + 범위의 처음) 
    2.2 위의 함수는 위로 볼록한 함수이다 따라서 범위의 한가운데로 갈수록 f(x) 의 값은 커진다.

'''
from collections import deque

l = int(input())
s = list(map(int, input().split()))
n = int(input())

answer = deque()
b = deque()

s = sorted(s)

for i in range(len(s)):
    answer.append((s[i], -1))
    if i == 0:
        b.append((0, s[i], s[i]-1))
    if i == len(s)-1:
        # b.append((s[i], 1000000001, 1000000001))
        continue
    else:
        b.append((s[i], s[i+1], s[i+1] - s[i] - 1))

b = deque(sorted(b, key=lambda x: x[2]))
# print(b)
while True:
    if len(b) == 0:
        break
    x, y, r = b.popleft()
    # print(x, y, r)
    if r != 0 and y != 1000000001:
        if r == 1:
            answer.append((x+1, -1))
        else:
            if r < n:
                for i in range(1, r+1):
                    answer.append((x+i, (i)*(y - i-x) - 1))
            else:
                for i in range(x+1, x + n//2 + 2):
                    answer.append((i, (i-x)*(y-i)-1))
                for i in range(y-1, y-1-n//2 - 1, -1):
                    answer.append((i, (i-x)*(y-i)-1))

for i in range(100):
    answer.append((s[-1] + i + 1, float('inf')))

# answer = sort_deque(answer, lambda x: x[1], lambda x: x[])
answer = deque(sorted(answer, key=lambda x: (x[1], x[0])))
# print(answer)

count = 0
t = len(answer)
while len(answer) != 0:
    if count == n:
        break
    x, y = answer.popleft()
    count += 1
    print(str(x), end=" ")
